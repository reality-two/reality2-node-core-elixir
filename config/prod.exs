import Config

# Note we also include the path to a cache manifest
# containing the digested version of static files. This
# manifest is generated by the `mix phx.digest` task,
# which you should run after static files are built and
# before starting your production server.
# config :reality2_web, Reality2Web.Endpoint,
#   url: [host: "example.com", port: 80],
#   cache_static_manifest: "priv/static/cache_manifest.json"

# Do not print debug messages in production
config :logger, level: :info

# Runtime production configuration, including reading
# of environment variables, is done on config/runtime.exs.

# config :reality2, Reality2.Repo,
#   username: "postgres",
#   password: "#6DDf9f9ce4",
#   hostname: "localhost",
#   database: "reality2_dev",
#   stacktrace: true,
#   show_sensitive_data_on_connection_error: false,
#   pool_size: 10

# For development, we disable any cache and enable
# debugging and code reloading.
#
# The watchers configuration can be used to run external
# watchers to your application. For example, we can use it
# to bundle .js and .css sources.
config :reality2_web, Reality2Web.Endpoint, server: true,
  # Binding to loopback ipv4 address prevents access from other machines.
  # Change to `ip: {0, 0, 0, 0}` to allow access from other machines.
  # http: [ip: {0, 0, 0, 0}, port: 4002],
  # check_origin: false,
  # code_reloader: false,
  # debug_errors: false,
  # watchers: [],

# ## SSL Support
#
# In order to use HTTPS in development, a self-signed
# certificate can be generated by running the following
# Mix task:
#
#     mix phx.gen.cert
#
# Run `mix help phx.gen.cert` for more information.
#
# The `http:` config above can be replaced with:
  https: [
    ip: {0, 0, 0, 0},
    port: 4001,
    cipher_suite: :strong,
    keyfile: "priv/cert/server.key",
    certfile: "priv/cert/server.crt"
  ],
  check_origin: false,
  code_reloader: false,
  debug_errors: false,
  watchers: []
